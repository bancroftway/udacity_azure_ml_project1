#Creating compute cluster

from azureml.core.compute_target import ComputeTargetException
cpu_cluster_name = "arvc-cpu-cluster"

# Verify that cluster does not exist already
try:
    cpu_cluster = ComputeTarget(workspace=ws, name=cpu_cluster_name)
    print('Found existing cluster, use it.')
except ComputeTargetException:
    compute_config = AmlCompute.provisioning_configuration(vm_size='STANDARD_D2_V2', max_nodes=4)
    cpu_cluster = ComputeTarget.create(ws, cpu_cluster_name, compute_config)

cpu_cluster.wait_for_completion(show_output=True)


----------------------
# Specify parameter sampler
ps = RandomParameterSampling( {
        "C": uniform(0.00, 2.5),
        "max_iter": uniform(25, 300)
    }
)

# Specify a Policy
policy = BanditPolicy(evaluation_interval=2, slack_factor=0.1)

if "training" not in os.listdir():
    os.mkdir("./training")

# Create a SKLearn estimator for use with train.py
est = SKLearn(source_directory=".", compute_target=cpu_cluster, entry_script='train.py')

# Create a HyperDriveConfig using the estimator, hyperparameter sampler, and policy.
hyperdrive_config = HyperDriveConfig(estimator=est, hyperparameter_sampling=ps, policy=policy, primary_metric_name="cpu_cluster", 
primary_metric_goal=PrimaryMetricGoal.MINIMIZE, max_total_runs=50, max_concurrent_runs=4, max_duration_minutes=60)


------------------
hdr = exp.submit(config=hyperdrive_config)

